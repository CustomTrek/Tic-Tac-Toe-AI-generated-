<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Tic Tac Toe</title>
<style>
  body {
    font-family: Arial, sans-serif;
  }
  .container {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: 50px;
  }
  .board {
    display: grid;
    grid-template-columns: repeat(3, 100px);
    grid-template-rows: repeat(3, 100px);
    gap: 5px;
  }
  .cell {
    width: 100px;
    height: 100px;
    background-color: lightgray;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 40px;
    cursor: pointer;
  }
  .cell.X {
    color: red;
  }
  .cell.O {
    color: blue;
  }
  .message {
    margin-top: 20px;
  }
</style>
</head>
<body>
<div class="container">
  <h1>Tic Tac Toe</h1>
  <p id="turn" class="message">Player X's Turn</p>
  <div class="board" id="board">
    <div class="cell" onclick="cellClicked(0)"></div>
    <div class="cell" onclick="cellClicked(1)"></div>
    <div class="cell" onclick="cellClicked(2)"></div>
    <div class="cell" onclick="cellClicked(3)"></div>
    <div class="cell" onclick="cellClicked(4)"></div>
    <div class="cell" onclick="cellClicked(5)"></div>
    <div class="cell" onclick="cellClicked(6)"></div>
    <div class="cell" onclick="cellClicked(7)"></div>
    <div class="cell" onclick="cellClicked(8)"></div>
  </div>
  <button onclick="resetGame()">Reset Game</button>
  <button onclick="toggleAI()">Play Against AI</button>
</div>

<script>
  const players = ["X", "O"];
  let currentPlayer = players[0];
  let cells = document.querySelectorAll(".cell");
  let board = document.getElementById("board");
  let turnDisplay = document.getElementById("turn");
  let aiEnabled = false;
  const MAX_DEPTH = 5;

  function cellClicked(index) {
    if (!cells[index].textContent && (currentPlayer !== players[1] || !aiEnabled)) {
      cells[index].textContent = currentPlayer;
      cells[index].classList.add(currentPlayer);
      if (checkWinner()) {
        announceWinner(currentPlayer);
      } else if (checkDraw()) {
        announceDraw();
      } else {
        currentPlayer = currentPlayer === players[0] ? players[1] : players[0];
        updateTurnDisplay();
        if (aiEnabled && currentPlayer === players[1]) {
          makeAIMove();
        }
      }
    }
  }

  function makeAIMove() {
    let bestScore = -Infinity;
    let move;
    for (let i = 0; i < 9; i++) {
      if (!cells[i].textContent) {
        cells[i].textContent = players[1];
        let score = minimax(cells, 0, false);
        cells[i].textContent = "";
        if (score > bestScore) {
          bestScore = score;
          move = i;
        }
      }
    }
    cells[move].textContent = players[1];
    cells[move].classList.add(players[1]);
    currentPlayer = players[0];
  }

  function minimax(board, depth, isMaximizing) {
    if (depth >= MAX_DEPTH || checkWinner()) {
      return evaluate(board, depth);
    } else if (checkDraw()) {
      return 0;
    }

    if (isMaximizing) {
      let bestScore = -Infinity;
      for (let i = 0; i < 9; i++) {
        if (!board[i].textContent) {
          board[i].textContent = players[1];
          let score = minimax(board, depth + 1, false);
          board[i].textContent = "";
          bestScore = Math.max(score, bestScore);
        }
      }
      return bestScore;
    } else {
      let bestScore = Infinity;
      for (let i = 0; i < 9; i++) {
        if (!board[i].textContent) {
          board[i].textContent = players[0];
          let score = minimax(board, depth + 1, true);
          board[i].textContent = "";
          bestScore = Math.min(score, bestScore);
        }
      }
      return bestScore;
    }
  }

  function evaluate(board, depth) {
    if (checkWinner()) {
      return currentPlayer === players[1] ? 10 - depth : -10 + depth;
    }
    return 0;
  }

  function checkWinner() {
    const winConditions = [
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      [0, 3, 6],
      [1, 4, 7],
      [2, 5, 8],
      [0, 4, 8],
      [2, 4, 6]
    ];

    return winConditions.some(condition =>
      condition.every(index => cells[index].textContent === currentPlayer)
    );
  }

  function checkDraw() {
    return Array.from(cells).every(cell => cell.textContent);
  }

  function resetGame() {
    cells.forEach(cell => {
      cell.textContent = "";
      cell.classList.remove(...players);
    });
    currentPlayer = players[0];
    updateTurnDisplay();
  }

  function toggleAI() {
    aiEnabled = !aiEnabled;
    if (aiEnabled && currentPlayer === players[1]) {
      makeAIMove();
    }
  }

  function announceWinner(player) {
    alert("Player " + player + " wins!");
    resetGame();
  }

  function announceDraw() {
    alert("It's a draw!");
    resetGame();
  }

  function updateTurnDisplay() {
    turnDisplay.textContent = "Player " + currentPlayer + "'s Turn";
  }
</script>
</body>
</html>